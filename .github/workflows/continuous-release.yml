name: Continuous Release

on:
  schedule:
    - cron: '0 0 * * *'
  workflow_dispatch: 

permissions:
  contents: read

jobs:
#  integration:
#    permissions:
#      pull-requests: write
#      actions: read
#      contents: read
#      security-events: write
#    uses: ./.github/workflows/continuous-integration.yml
    
  update_release_draft:
    permissions:
      contents: write
      pull-requests: write
    runs-on: ubuntu-latest
#    needs: [ integration ]
    steps:
      - uses: release-drafter/release-drafter@v6.0.0
        id: releaser
        with:
          publish: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - uses: actions/checkout@v4
      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: 20
      - name: Set version
        run: |
          cd NG.Host.Frontend
          npm version ${{ steps.releaser.outputs.tag_name }} --git-tag-version false -f --allow-same-version true
      - name: force update major tag
        run: |
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config --global user.name "Github action"
          git add NG.Host.Frontend/package.json
          git commit -m "Bump package.json version to ${{ steps.releaser.outputs.tag_name }}"
          git push origin refs/tags/${{ steps.releaser.outputs.tag_name }} -f
    outputs: 
      tag: ${{ steps.releaser.outputs.tag_name }}
  deploy:
    name: Publish images to package registry
    runs-on: ubuntu-20.04
    needs: [ update_release_draft ]
    permissions: write-all
    strategy:
      fail-fast: false
      matrix:
        image:
          - Api
          - Frontend
        include:
          - image: Api
            context: .
            dockerfile: NG.Host.WebApi/Dockerfile
          - image: Frontend
            context: ./NG.Host.Frontend/
            dockerfile: Dockerfile
    steps:
      - uses: actions/checkout@v4
        name: Check out code

      - name: Build and Publish Docker image
        uses: zvfvrv/docker-bpgpr@1.0.2
        with:
          gh_token: ${{ secrets.GITHUB_TOKEN }}
          image_name: ${{ matrix.image }}
          tags: latest, ${{needs.update_release_draft.outputs.tag}}
          path: ${{ matrix.context }}
          dockerfile: ${{ matrix.dockerfile }}